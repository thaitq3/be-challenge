// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package storage

import (
	context "context"
	dto "crud-challenge/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockIWagerDAO is an autogenerated mock type for the IWagerDAO type
type MockIWagerDAO struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, wager
func (_m *MockIWagerDAO) Create(ctx context.Context, wager *dto.Wager) (*Wager, error) {
	ret := _m.Called(ctx, wager)

	var r0 *Wager
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Wager) *Wager); ok {
		r0 = rf(ctx, wager)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Wager) error); ok {
		r1 = rf(ctx, wager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockIWagerDAO) GetById(ctx context.Context, id uint) (*Wager, error) {
	ret := _m.Called(ctx, id)

	var r0 *Wager
	if rf, ok := ret.Get(0).(func(context.Context, uint) *Wager); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, page, limit
func (_m *MockIWagerDAO) List(ctx context.Context, page int, limit int) ([]*Wager, error) {
	ret := _m.Called(ctx, page, limit)

	var r0 []*Wager
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*Wager); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
